# Generated by Django 5.0.6 on 2024-05-16 05:17

from datetime import datetime, timezone

from PIL import Image
from django.db import migrations


def parse_exif_creation_time(photo):
    '''Takes photo attribute of Photo model, parses creation timestamp and zone
    from exif data, returns as datetime object (returns None if not found)
    '''
    exif_data = Image.open(photo)._getexif()

    if exif_data:
        # Parse Date/Time Original and Offset Time Original parameters
        datetime_original = exif_data.get(36867)
        offset_original = exif_data.get(36881)

        # If both found parse as original timezone + convert to UTC
        if datetime_original and offset_original:
            # Remove colon if present (not supported by strptime)
            return datetime.strptime(
                f"{datetime_original} {offset_original.replace(':', '')}",
                "%Y:%m:%d %H:%M:%S %z"
            ).astimezone(timezone.utc)
        else:
            return None
    else:
        return None


def fix_incorrect_photo_created_timestamps(apps, schema_editor):
    '''Iterate Photo model and compare created timestamp to exif data for each
    entry. If created does not match (timezone was previously ignored), build
    datetime from exif data and overwrite created timestamp.
    '''
    Photo = apps.get_model('plant_tracker', 'Photo')
    for photo in Photo.objects.all():
        exif_created = parse_exif_creation_time(photo.photo)
        if exif_created:
            if photo.created.isoformat() != exif_created.isoformat():
                photo.created = exif_created
                photo.save()


class Migration(migrations.Migration):

    dependencies = [
        ('plant_tracker', '0009_noteevent'),
    ]

    operations = [
        migrations.RunPython(fix_incorrect_photo_created_timestamps),
    ]
